# Generated by Django 4.1.6 on 2023-04-23 17:27

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Submit',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=8, null=True, verbose_name='name')),
                ('student_id', models.CharField(blank=True, max_length=128, null=True, verbose_name='student id')),
                ('url', models.FileField(upload_to='file/', verbose_name='file upload')),
            ],
            options={
                'verbose_name_plural': 'task detail',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='task title')),
                ('end_date', models.DateField(verbose_name='task end time')),
                ('detail', models.TextField(verbose_name='task description')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='release time')),
            ],
            options={
                'verbose_name_plural': 'task detail',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('tel', models.CharField(blank=True, max_length=12, null=True, verbose_name='phone number')),
                ('addr', models.CharField(blank=True, max_length=8, null=True, verbose_name='address')),
                ('name', models.CharField(blank=True, max_length=8, null=True, verbose_name='name')),
                ('sex', models.CharField(blank=True, max_length=2, null=True, verbose_name='sex')),
                ('student_id', models.CharField(blank=True, max_length=128, null=True, verbose_name='student id')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='age')),
                ('id_card', models.CharField(blank=True, max_length=64, null=True, verbose_name='identity code')),
                ('role', models.CharField(default='normal user', max_length=16, verbose_name='user role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'user inf',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
